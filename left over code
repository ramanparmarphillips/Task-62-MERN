// const deleteGoal = asyncHandler( async (req, res) => {

//     const goal = await Goal.findById(req.params.id)

//     if (!goal) {
//       res.status(400)
//       throw new Error('Goal not found')
//     }

//     const user = await User.findById(req.user.id)

//     //check for user
//     if (!user) {
//         res.status(404)
//         throw new Error('User not found')
//     }

//     //make sure the logged in user matches the user that created the goal
//     if (goal.user.toString() !== user.id) {
//         res.status(401)
//         throw new Error('Not authorized to delete goal')
//     }




// const jwt = require('jsonwebtoken')
// const asyncHandler = require('express-async-handler')
// const User = require('../Models/userModels')

// const protect = asyncHandler(async (req, res, next) => {
//   let token

//   if (
//     req.headers.authorization &&
//     req.headers.authorization.startsWith('Bearer')
//   ) {
//     try {
//       // Get token from header
//       token = req.headers.authorization.split(' ')[1]

//       // Verify token
//       const decoded = jwt.verify(token, process.env.JWT_SECRET)

//       // Get user from the token
//       req.user = await User.findById(decoded.id).select('-password')

//       // Check if user is an admin
//       if (req.user.role === 'admin') {
//         next()
//       } else {
//         res.status(403)
//         throw new Error('Not authorized, user is not an admin')
//       }
//     } catch (error) {
//       console.log(error)
//       res.status(401)
//       throw new Error('Not authorized')
//     }
//   }

//   if (!token) {
//     res.status(401)
//     throw new Error('Not authorized, no token')
//   }
// })

// module.exports = { protect }


//     await goal.deleteOne()

//     res.status(200).json({id: req.params.id});
// })

//Description: Update goal
//Route: PUT /api/goals/:id
//Access: Private
// const updateGoal = asyncHandler( async (req, res) => {
//     const goal = await Goal.findById(req.params.id)

//     if (!goal) {
//         res.status(404)
//         throw new Error('Goal not found')
//     }

//     const user = await User.findById(req.user.id)

//     //check for user
//     if (!user) {
//         res.status(404)
//         throw new Error('User not found')
//     }

//     //make sure the logged in user matches the user that created the goal
//     if (goal.user.toString() !== user.id) {
//         res.status(401)
//         throw new Error('Not authorized to update goal')
//     }

//     const updatedGoal = await Goal.findByIdAndUpdate(
//         req.params.id,
//         req.body, {
//         new: true,
//         }
//     )
  
//     res.status(200).json({message: `Update goal ${req.params.id}`});
// })




//Description: Delete goal
//Route: DELETE /api/goals/:id
//Access: Private
//Description: Authenticate user
//Route: GET /api/users/login
//Access: Private
//! ADD HERE THE ROLE OF THE USER (ADMIN, EMPLOYER ID, ETC) in payload

// const   getMe = asyncHandler(async (req, res) => {

// })
